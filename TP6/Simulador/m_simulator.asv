%-------------------------------------------------------------------------%
%                                 FULGOR
% Trabajo práctico: TP6 Transformada Z - Recuperación de portadora
% Programmer(s): Daniel A. Juarez
% Created on   : October 2023
% Description  : System main
%-------------------------------------------------------------------------%

function o_data_s = m_simulator(i_cfg_s)

    if nargin == 0
        close all 
        clear all
        clc 
    end    

    %--------------------------%
    %     DEFAULT SETTINGS
    %--------------------------%

    % -- General -- %
    config_s.en_plots = 1;                  % Plots -> ON: 1; OFF: 0
    config_s.en_saves = 0;                  % Saves Plots -> ON: 1; OFF: 0
    fz = 15;                                % Fonts size    
    position_and_size = [100 100 800 600];  % Posicion y tamaño de los plots
    BR = 32e9;
    fs = BR;

    % -- Tx -- % 
    config_s.tx_s.BR = 32e9;    % Baud rate
    config_s.tx_s.M = 4;        % Niveles de la modulacion
    config_s.tx_s.L = 10e3;     % Largo de simu
    config_s.tx_s.fs = BR;      % Frec de sampling
    config_s.tx_s.T = 1/BR;     % Intervalo de tiempo entre dos simbolos consecutivos
    config_s.tx_s.Ts = 1/fs;    % Tiempo entre 2 samples consecutivos a la salida del Tx

    % -- Channel -- %
                % -- Parametros de Portadora -- %
    config_s.ch_s.delta_freq = 0e6;                     % Offset del LO
    config_s.ch_s.LW = 00e3;                            % Ancho de linea [Hz]
    config_s.ch_s.theta0 = 60/180*pi;                    % Fase inicial
    config_s.ch_s.frequency_fluctuations_amp = 0e6;     % Fluc de amplitud
    config_s.ch_s.frequency_fluctuations_freq = 1e3;    % Fluct de Frec
    config_s.ch_s.phase_tone_amp = 10/180*pi;           % Amplitud del tono
    config_s.ch_s.phase_tone_freq = 250e6;              % Fase del tono
                % -- Parametros del canal -- %
    config_s.ch_s.EbNo_dB = 20;                         % Ruido del sitema en [dB]

    % -- Rx Carrier recovery -- %   
    config_s.rx_ch.Kp = 15e-2;
    config_s.rx_ch.Ki = 15e-2/1000;

    %--------------------------%
    %       REASSIGNMENT
    %--------------------------%
    % Sobre escritura de los parámetros por default si a m_simulator se le 
    % pasa mas de un argumento de entrada, se sobre escribe cuando se 
    % realiza test de simulación.
    if nargin > 0 
        config_s = OverwriteParameters(i_cfg_s, config_s);
    end
    % Shared variables
    % -- Shared ch --%
    config_s.ch_s.fs = config_s.tx_s.fs;
    config_s.ch_s.M = config_s.tx_s.M;
    config_s.ch_s.Ts = config_s.tx_s.Ts;

    % -- Shared rx--%
    config_s.rx_s.M = config_s.tx_s.M;

    %--------------------------%
    %          PROCESS
    %--------------------------%

    % -- Tx -- %
    o_tx_s = TransmisorMQAM(config_s.tx_s);
   
    % -- Ch -- %
    i_ch_s.xsymb = o_tx_s.xsymb;
    o_ch_s = CanalDeTransmision(i_ch_s, config_s.ch_s);

    % -- Rx Carrie Recovery -- %
    i_rx_s.ch_out_symb = o_ch_s.ch_out_symb;    
    o_rx_s = RxCarrieRecovery(i_rx_s, config_s.rx_s);

    % -- BER del receptor-- %
    i_ber_s.M = config_s.tx_s.M;
    i_ber_s.EbNo_dB = config_s.ch_s.EbNo_dB;
    i_ber_s.xsymb = o_tx_s.xsymb;
    i_ber_s.ak_hat = o_rx_s.ak_hat;
    i_ber_s.pll_output = o_rx_s.pll_output;
    i_ber_s.Ldata = o_rx_s.Ldata;

    o_ber_s = BerCheck(i_ber_s);

    %--------------------------%
    %          PLOTS
    %--------------------------%

    if config_s.en_plots 

        % -- generate dir output -- %
        figur_dir = mfilename('fullpath');    
        figur_dir = figur_dir(1:end-length(mfilename));
        figur_dir = [figur_dir, 'SRC/Plots/'];
        
        if ~exist(figur_dir,'dir')
            mkdir(figur_dir);
        end

        % -- Variables para los plots -- %
        
        % -- Tx -- %
        xsymb = o_tx_s.xsymb; 
        % -- Ch -- %
        ch_out_symb = o_ch_s.ch_out_symb;
        phase_noise = o_ch_s.phase_noise;
        % -- Rx Carrie Recovery -- %
        pll_output = o_rx_s.pll_output;      
        nco_output = o_rx_s.nco_output;
        integral_branch = o_rx_s.integral_branch; 
        ak_hat = o_rx_s.ak_hat;
        phase_error = o_rx_s.phase_error;
        Ldata = o_rx_s.Ldata;

        % -- Constelacion a la salida del Tx -- %
        scatterplot(xsymb)
        grid on 
        tit = sprintf('Constelacion salida Tx');
        saveName = sprintf('Ejerc6_ScatterPlotTx.jpg');
        if config_s.tx_s.M == 4
            name = sprintf('QAM');
        elseif config_s.tx_s.M > 4
            name = sprintf('QAM%d',config_s.tx_s.M);
        end    
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves 
            saveas(gcf,[figur_dir, saveName]);  
        end 
       
        % -- Constelacion a la salida del Ch -- %
        scatterplot(ch_out_symb)
        grid on 
        tit = sprintf('Constelacion salida Ch');
        saveName = sprintf('Ejerc6_ScatterPlotCh.jpg');
        if config_s.tx_s.M == 4
            name = sprintf('QAM');
        elseif config_s.tx_s.M > 4
            name = sprintf('QAM%d',config_s.tx_s.M);
        end
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end

        % -- Ruido de fase del Ch -- %
        figure
        plot(phase_noise)
        grid on
        tit = sprintf('Ruido de fase del canal');
        saveName = sprintf('Ejerc6_PhaseNoise.jpg');
        name = sprintf('PhaseNoise');
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);
        xlabel('Time')
        ylabel('Channel Phase Noise [rad]')
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end

        % -- Error de fase del receptor -- %
        figure
        plot(phase_error)
        grid on
        tit = sprintf('Error de fase');
        saveName = sprintf('Ejerc6_PhaseError.jpg');
        name = sprintf('PhaseError');
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);        
        xlabel("Time")
        ylabel("Phase Error")
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end 
    
        % -- Rama integral del PLL -- %
        figure
        plot(integral_branch*BR/2/pi/1e6)
        grid on
        tit = sprintf('Rama integral del PLL');
        saveName = sprintf('Ejerc6_IntegralBranch.jpg');
        name = sprintf('IntegralBranch');
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);          
        xlabel("Time")
        ylabel("Integral Branch [MHz]")
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end 

        % -- Salida del NCO vs error de fase -- %
        figure
        plot(nco_output); hold all
        plot(phase_noise); hold all
        grid on
        tit = sprintf('Salida del NCO vs error de fase');
        saveName = sprintf('Ejerc6_OutputNCOvsPhaseNoise.jpg');
        name1 = sprintf('PLL_NCO');
        name2 = sprintf('Channel');
        legend(name1,name2,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);        
        xlabel("Time")
        ylabel("Phase [rad]")
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end 
        
        % -- Constelación a la salida del PLL -- %
        scatterplot(pll_output(Ldata/2:end))
        grid on;
        tit = sprintf('Salida del PLL');
        saveName = sprintf('Ejerc6_PLLOutput.jpg');
        if config_s.tx_s.M == 4
            name = sprintf('QAM');
        elseif config_s.tx_s.M > 4
            name = sprintf('QAM%d',config_s.tx_s.M);
        end
        legend(name,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end
        
        % -- Entrada y salida del slicer -- %
        figure
        plot(real(pll_output), '.r');
        hold all
        plot(real(ak_hat), 'xb');
        grid on;
        tit = sprintf('Entrada y salida del slicer');        
        saveName = sprintf('Ejerc6_SlicerInputOutput.jpg');
        name1 = sprintf('Slicer Input');
        name2 = sprintf('Slicer Output');
        legend(name1,name2,'Location', 'eastoutside','Interpreter','latex','FontSize', fz-5);
        title(tit,'Interpreter','latex', 'FontSize', fz);
        set(gcf, 'Position',position_and_size,'Color', 'w');
        if config_s.en_saves              
            saveas(gcf,[figur_dir, saveName]);          
        end       
    end
    
    %--------------------------%
    %          OUTPUT
    %--------------------------% 
    % BER sin corregir SC
    o_data_s.ber_sin_Corrigir_SC = o_ber_s.aprox_ber_sin_corregir_cs; 
    % BER corrigiendo SC
    o_data_s.ber_corrigiendo_SC = o_ber_s.aprox_ber_corrigiendo_cs; 
    % BER teorica
    o_data_s.ber_theo = o_ber_s.ber_teo;                 

end







